use serde::{Deserialize, Serialize};
use windows::Win32::UI::Input::KeyboardAndMouse;

#[derive(
    Debug,
    Clone,
    Copy,
    Hash,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    enum_map::Enum,
    strum::EnumIter,
    num_derive::FromPrimitive,
    num_derive::ToPrimitive,
    Serialize,
    Deserialize,
)]
#[repr(u8)]
#[allow(non_camel_case_types, clippy::upper_case_acronyms)] // Just for here, to be consistent with VK codes...
pub enum KeyButton {
    LBUTTON = 0x01,
    RBUTTON = 0x02,
    CANCEL = 0x03,
    MBUTTON = 0x04,
    XBUTTON1 = 0x05,
    XBUTTON2 = 0x06,
    // Reserved = 0x07,
    BACK = 0x08,
    TAB = 0x09,
    // Reserved = 0x0A,
    // Reserved = 0x0B,
    CLEAR = 0x0C, // What is this??
    RETURN = 0x0D,
    // Reserved = 0x0E,
    // Reserved = 0x0F,
    SHIFT = 0x10,
    CONTROL = 0x11,
    MENU = 0x12,
    PAUSE = 0x13,
    CAPITAL = 0x14,
    KANA_HANGUL = 0x15,
    IME_ON = 0x16,
    JUNJA = 0x17,
    FINAL = 0x18,
    HANJA_KANJI = 0x19,
    IME_OFF = 0x1A,
    ESCAPE = 0x1B,
    CONVERT = 0x1C,
    NONCONVERT = 0x1D,
    ACCEPT = 0x1E,
    MODECHANGE = 0x1F,
    SPACE = 0x20,
    PRIOR = 0x21,
    NEXT = 0x22,
    END = 0x23,
    HOME = 0x24,
    LEFT = 0x25,
    UP = 0x26,
    RIGHT = 0x27,
    DOWN = 0x28,
    SELECT = 0x29,
    PRINT = 0x2A,
    EXECUTE = 0x2B,
    SNAPSHOT = 0x2C,
    INSERT = 0x2D,
    DELETE = 0x2E,
    HELP = 0x2F,
    KEY0 = 0x30,
    KEY1 = 0x31,
    KEY2 = 0x32,
    KEY3 = 0x33,
    KEY4 = 0x34,
    KEY5 = 0x35,
    KEY6 = 0x36,
    KEY7 = 0x37,
    KEY8 = 0x38,
    KEY9 = 0x39,
    A = 0x41,
    B = 0x42,
    C = 0x43,
    D = 0x44,
    E = 0x45,
    F = 0x46,
    G = 0x47,
    H = 0x48,
    I = 0x49,
    J = 0x4A,
    K = 0x4B,
    L = 0x4C,
    M = 0x4D,
    N = 0x4E,
    O = 0x4F,
    P = 0x50,
    Q = 0x51,
    R = 0x52,
    S = 0x53,
    T = 0x54,
    U = 0x55,
    V = 0x56,
    W = 0x57,
    X = 0x58,
    Y = 0x59,
    Z = 0x5A,
    LWIN = 0x5B,
    RWIN = 0x5C,
    APPS = 0x5D,
    SLEEP = 0x5F,
    NUMPAD0 = 0x60,
    NUMPAD1 = 0x61,
    NUMPAD2 = 0x62,
    NUMPAD3 = 0x63,
    NUMPAD4 = 0x64,
    NUMPAD5 = 0x65,
    NUMPAD6 = 0x66,
    NUMPAD7 = 0x67,
    NUMPAD8 = 0x68,
    NUMPAD9 = 0x69,
    MULTIPLY = 0x6A,
    ADD = 0x6B,
    SEPARATOR = 0x6C,
    SUBTRACT = 0x6D,
    DECIMAL = 0x6E,
    DIVIDE = 0x6F,
    F1 = 0x70,
    F2 = 0x71,
    F3 = 0x72,
    F4 = 0x73,
    F5 = 0x74,
    F6 = 0x75,
    F7 = 0x76,
    F8 = 0x77,
    F9 = 0x78,
    F10 = 0x79,
    F11 = 0x7A,
    F12 = 0x7B,
    F13 = 0x7C,
    F14 = 0x7D,
    F15 = 0x7E,
    F16 = 0x7F,
    F17 = 0x80,
    F18 = 0x81,
    F19 = 0x82,
    F20 = 0x83,
    F21 = 0x84,
    F22 = 0x85,
    F23 = 0x86,
    F24 = 0x87,
    NUMLOCK = 0x90,
    SCROLL = 0x91,
    // TODO - OEM-specific?
    LSHIFT = 0xA0,
    RSHIFT = 0xA1,
    LCONTROL = 0xA2,
    RCONTROL = 0xA3,
    LMENU = 0xA4,
    RMENU = 0xA5,
    BROWSER_BACK = 0xA6,
    BROWSER_FORWARD = 0xA7,
    BROWSER_REFRESH = 0xA8,
    BROWSER_STOP = 0xA9,
    BROWSER_SEARCH = 0xAA,
    BROWSER_FAVORITES = 0xAB,
    BROWSER_HOME = 0xAC,
    VOLUME_MUTE = 0xAD,
    VOLUME_DOWN = 0xAE,
    VOLUME_UP = 0xAF,
    MEDIA_NEXT_TRACK = 0xB0,
    MEDIA_PREV_TRACK = 0xB1,
    MEDIA_STOP = 0xB2,
    MEDIA_PLAY_PAUSE = 0xB3,
    LAUNCH_MAIL = 0xB4,
    LAUNCH_MEDIA_SELECT = 0xB5,
    LAUNCH_APP1 = 0xB6,
    LAUNCH_APP2 = 0xB7,
    OEM_1 = 0xBA,
    OEM_PLUS = 0xBB,
    OEM_COMMA = 0xBC,
    OEM_MINUS = 0xBD,
    OEM_PERIOD = 0xBE,
    OEM_2 = 0xBF,
    OEM_3 = 0xC0,
    OEM_4 = 0xDB,
    OEM_5 = 0xDC,
    OEM_6 = 0xDD,
    OEM_7 = 0xDE,
    OEM_8 = 0xDF,
    // TODO - OEM-specific?
    OEM_102 = 0xE2,
    // TODO - OEM-specific?
    PROCESSKEY = 0xE5,
    // TODO - OEM-specific?
    PACKET = 0xE7,
    // TODO - OEM-specific?
    ATTN = 0xF6,
    CRSEL = 0xF7,
    EXSEL = 0xF8,
    EREOF = 0xF9,
    PLAY = 0xFA,
    ZOOM = 0xFB,
    NONAME = 0xFC,
    PA1 = 0xFD,
    OEM_CLEAR = 0xFE,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum KeyType {
    // Keys you will frequently want to remap.
    Common,
    // Keys that are either rare on modern hardware, or keys you probably don't want to remap.
    // Reemap will hide them behind a setting, but still allow remaps to/from it.
    // Examples include the "mouse-button-as-key" keys and the IME keys.
    Rare,
    // Keys Reemap will refuse to remap.
    // An important example is Scroll Lock, as Reemap uses it as an "escape hatch". When scroll lock
    // is enabled, Reemap will not remap anything.
    Unmappable,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
struct KeyDisplayOpts {
    // give more specific names to OEM keys if it's the US layout
    assume_us_layout: bool,
}

impl KeyButton {
    pub fn from_vk(vk: u8) -> Option<Self> {
        use num_traits::FromPrimitive;
        Self::from_u8(vk)
    }

    pub fn to_vk(self) -> u8 {
        use num_traits::ToPrimitive;
        self.to_u8()
            .expect("button should always be convertable to virtual key code")
    }

    pub fn to_keydown_input(self) -> KeyboardAndMouse::INPUT {
        use KeyboardAndMouse as KBM;
        let vk = self.to_vk();
        KBM::INPUT {
            r#type: KBM::INPUT_KEYBOARD,
            Anonymous: KBM::INPUT_0 {
                ki: KBM::KEYBDINPUT {
                    wVk: KBM::VIRTUAL_KEY(vk as u16),
                    wScan: 0,
                    dwFlags: KBM::KEYBD_EVENT_FLAGS(0),
                    time: 0,
                    dwExtraInfo: 0,
                },
            },
        }
    }

    pub fn to_keyup_input(self) -> KeyboardAndMouse::INPUT {
        use KeyboardAndMouse as KBM;
        let vk = self.to_vk();
        KBM::INPUT {
            r#type: KBM::INPUT_KEYBOARD,
            Anonymous: KBM::INPUT_0 {
                ki: KBM::KEYBDINPUT {
                    wVk: KBM::VIRTUAL_KEY(vk as u16),
                    wScan: 0,
                    dwFlags: KBM::KEYEVENTF_KEYUP,
                    time: 0,
                    dwExtraInfo: 0,
                },
            },
        }
    }

    pub fn key_type(self) -> KeyType {
        match self {
            Self::LBUTTON => KeyType::Rare,
            Self::RBUTTON => KeyType::Rare,
            Self::CANCEL => KeyType::Rare,
            Self::MBUTTON => KeyType::Rare,
            Self::XBUTTON1 => KeyType::Rare,
            Self::XBUTTON2 => KeyType::Rare,
            Self::BACK => KeyType::Common,
            Self::TAB => KeyType::Common,
            Self::CLEAR => KeyType::Rare,
            Self::RETURN => KeyType::Common,
            Self::SHIFT => KeyType::Rare,
            Self::CONTROL => KeyType::Rare,
            Self::MENU => KeyType::Rare,
            Self::PAUSE => KeyType::Rare,
            Self::CAPITAL => KeyType::Common,
            Self::KANA_HANGUL => KeyType::Rare,
            Self::IME_ON => KeyType::Rare,
            Self::JUNJA => KeyType::Rare,
            Self::FINAL => KeyType::Rare,
            Self::HANJA_KANJI => KeyType::Rare,
            Self::IME_OFF => KeyType::Rare,
            Self::ESCAPE => KeyType::Common,
            Self::CONVERT => KeyType::Rare,
            Self::NONCONVERT => KeyType::Rare,
            Self::ACCEPT => KeyType::Rare,
            Self::MODECHANGE => KeyType::Rare,
            Self::SPACE => KeyType::Common,
            Self::PRIOR => KeyType::Common,
            Self::NEXT => KeyType::Common,
            Self::END => KeyType::Common,
            Self::HOME => KeyType::Common,
            Self::LEFT => KeyType::Common,
            Self::UP => KeyType::Common,
            Self::RIGHT => KeyType::Common,
            Self::DOWN => KeyType::Common,
            Self::SELECT => KeyType::Rare,
            Self::PRINT => KeyType::Rare,
            Self::EXECUTE => KeyType::Rare,
            Self::SNAPSHOT => KeyType::Common,
            Self::INSERT => KeyType::Common,
            Self::DELETE => KeyType::Common,
            Self::HELP => KeyType::Rare,
            Self::KEY0 => KeyType::Common,
            Self::KEY1 => KeyType::Common,
            Self::KEY2 => KeyType::Common,
            Self::KEY3 => KeyType::Common,
            Self::KEY4 => KeyType::Common,
            Self::KEY5 => KeyType::Common,
            Self::KEY6 => KeyType::Common,
            Self::KEY7 => KeyType::Common,
            Self::KEY8 => KeyType::Common,
            Self::KEY9 => KeyType::Common,
            Self::A => KeyType::Common,
            Self::B => KeyType::Common,
            Self::C => KeyType::Common,
            Self::D => KeyType::Common,
            Self::E => KeyType::Common,
            Self::F => KeyType::Common,
            Self::G => KeyType::Common,
            Self::H => KeyType::Common,
            Self::I => KeyType::Common,
            Self::J => KeyType::Common,
            Self::K => KeyType::Common,
            Self::L => KeyType::Common,
            Self::M => KeyType::Common,
            Self::N => KeyType::Common,
            Self::O => KeyType::Common,
            Self::P => KeyType::Common,
            Self::Q => KeyType::Common,
            Self::R => KeyType::Common,
            Self::S => KeyType::Common,
            Self::T => KeyType::Common,
            Self::U => KeyType::Common,
            Self::V => KeyType::Common,
            Self::W => KeyType::Common,
            Self::X => KeyType::Common,
            Self::Y => KeyType::Common,
            Self::Z => KeyType::Common,
            Self::LWIN => KeyType::Common,
            Self::RWIN => KeyType::Common,
            Self::APPS => KeyType::Common,
            Self::SLEEP => KeyType::Common,
            Self::NUMPAD0 => KeyType::Common,
            Self::NUMPAD1 => KeyType::Common,
            Self::NUMPAD2 => KeyType::Common,
            Self::NUMPAD3 => KeyType::Common,
            Self::NUMPAD4 => KeyType::Common,
            Self::NUMPAD5 => KeyType::Common,
            Self::NUMPAD6 => KeyType::Common,
            Self::NUMPAD7 => KeyType::Common,
            Self::NUMPAD8 => KeyType::Common,
            Self::NUMPAD9 => KeyType::Common,
            Self::MULTIPLY => KeyType::Common,
            Self::ADD => KeyType::Common,
            Self::SEPARATOR => KeyType::Rare,
            Self::SUBTRACT => KeyType::Common,
            Self::DECIMAL => KeyType::Common,
            Self::DIVIDE => KeyType::Common,
            Self::F1 => KeyType::Common,
            Self::F2 => KeyType::Common,
            Self::F3 => KeyType::Common,
            Self::F4 => KeyType::Common,
            Self::F5 => KeyType::Common,
            Self::F6 => KeyType::Common,
            Self::F7 => KeyType::Common,
            Self::F8 => KeyType::Common,
            Self::F9 => KeyType::Common,
            Self::F10 => KeyType::Common,
            Self::F11 => KeyType::Common,
            Self::F12 => KeyType::Common,
            Self::F13 => KeyType::Common,
            Self::F14 => KeyType::Common,
            Self::F15 => KeyType::Common,
            Self::F16 => KeyType::Common,
            Self::F17 => KeyType::Common,
            Self::F18 => KeyType::Common,
            Self::F19 => KeyType::Common,
            Self::F20 => KeyType::Common,
            Self::F21 => KeyType::Common,
            Self::F22 => KeyType::Common,
            Self::F23 => KeyType::Common,
            Self::F24 => KeyType::Common,
            Self::NUMLOCK => KeyType::Common,
            Self::SCROLL => KeyType::Unmappable,
            Self::LSHIFT => KeyType::Common,
            Self::RSHIFT => KeyType::Common,
            Self::LCONTROL => KeyType::Common,
            Self::RCONTROL => KeyType::Common,
            Self::LMENU => KeyType::Common,
            Self::RMENU => KeyType::Common,
            Self::BROWSER_BACK => KeyType::Rare,
            Self::BROWSER_FORWARD => KeyType::Rare,
            Self::BROWSER_REFRESH => KeyType::Rare,
            Self::BROWSER_STOP => KeyType::Rare,
            Self::BROWSER_SEARCH => KeyType::Rare,
            Self::BROWSER_FAVORITES => KeyType::Rare,
            Self::BROWSER_HOME => KeyType::Rare,
            Self::VOLUME_MUTE => KeyType::Common,
            Self::VOLUME_DOWN => KeyType::Common,
            Self::VOLUME_UP => KeyType::Common,
            Self::MEDIA_NEXT_TRACK => KeyType::Common,
            Self::MEDIA_PREV_TRACK => KeyType::Common,
            Self::MEDIA_STOP => KeyType::Common,
            Self::MEDIA_PLAY_PAUSE => KeyType::Common,
            Self::LAUNCH_MAIL => KeyType::Common,
            Self::LAUNCH_MEDIA_SELECT => KeyType::Common,
            Self::LAUNCH_APP1 => KeyType::Common,
            Self::LAUNCH_APP2 => KeyType::Common,
            Self::OEM_1 => KeyType::Common,
            Self::OEM_PLUS => KeyType::Common,
            Self::OEM_COMMA => KeyType::Common,
            Self::OEM_MINUS => KeyType::Common,
            Self::OEM_PERIOD => KeyType::Common,
            Self::OEM_2 => KeyType::Common,
            Self::OEM_3 => KeyType::Common,
            Self::OEM_4 => KeyType::Common,
            Self::OEM_5 => KeyType::Common,
            Self::OEM_6 => KeyType::Common,
            Self::OEM_7 => KeyType::Common,
            Self::OEM_8 => KeyType::Rare,
            Self::OEM_102 => KeyType::Common,
            Self::PROCESSKEY => KeyType::Rare,
            Self::PACKET => KeyType::Rare,
            Self::ATTN => KeyType::Rare,
            Self::CRSEL => KeyType::Rare,
            Self::EXSEL => KeyType::Rare,
            Self::EREOF => KeyType::Rare,
            Self::PLAY => KeyType::Rare,
            Self::ZOOM => KeyType::Rare,
            Self::NONAME => KeyType::Unmappable,
            Self::PA1 => KeyType::Rare,
            Self::OEM_CLEAR => KeyType::Rare,
        }
    }
    fn display(&self, display_opts: KeyDisplayOpts) -> &'static str {
        let KeyDisplayOpts { assume_us_layout } = display_opts;

        match self {
            Self::LBUTTON => "Left Click as key",
            Self::RBUTTON => "Right Click as key",
            Self::CANCEL => "Control break processing",
            Self::MBUTTON => "Middle Click as key",
            Self::XBUTTON1 => "Mouse X1 as key",
            Self::XBUTTON2 => "Mouse X2 as key",
            Self::BACK => "Backspace",
            Self::TAB => "Tab",
            Self::CLEAR => "Clear",
            Self::RETURN => "Enter",
            Self::SHIFT => "Shift (ambidextrous)",
            Self::CONTROL => "Ctrl (ambidextrous)",
            Self::MENU => "Alt (ambidextrous)",
            Self::PAUSE => "Pause",
            Self::CAPITAL => "Caps Lock",
            Self::KANA_HANGUL => "IME Kana/Hangul",
            Self::IME_ON => "IME On",
            Self::JUNJA => "IME Junja",
            Self::FINAL => "IME Final",
            Self::HANJA_KANJI => "IME Hanja/Kanji",
            Self::IME_OFF => "IME Off",
            Self::ESCAPE => "Escape",
            Self::CONVERT => "IME Convert",
            Self::NONCONVERT => "IME Nonconvert",
            Self::ACCEPT => "IME Accept",
            Self::MODECHANGE => "IME Mode Change",
            Self::SPACE => "Space",
            Self::PRIOR => "Page Up",
            Self::NEXT => "Page Down",
            Self::END => "End",
            Self::HOME => "Home",
            Self::LEFT => "Left Arrow",
            Self::UP => "Up Arrow",
            Self::RIGHT => "Right Arrow",
            Self::DOWN => "Down Arrow",
            Self::SELECT => "Select",
            Self::PRINT => "Print",
            Self::EXECUTE => "Execute",
            Self::SNAPSHOT => "Print Screen",
            Self::INSERT => "Insert",
            Self::DELETE => "Delete",
            Self::HELP => "Help",
            Self::KEY0 => "0",
            Self::KEY1 => "1",
            Self::KEY2 => "2",
            Self::KEY3 => "3",
            Self::KEY4 => "4",
            Self::KEY5 => "5",
            Self::KEY6 => "6",
            Self::KEY7 => "7",
            Self::KEY8 => "8",
            Self::KEY9 => "9",
            Self::A => "A",
            Self::B => "B",
            Self::C => "C",
            Self::D => "D",
            Self::E => "E",
            Self::F => "F",
            Self::G => "G",
            Self::H => "H",
            Self::I => "I",
            Self::J => "J",
            Self::K => "K",
            Self::L => "L",
            Self::M => "M",
            Self::N => "N",
            Self::O => "O",
            Self::P => "P",
            Self::Q => "Q",
            Self::R => "R",
            Self::S => "S",
            Self::T => "T",
            Self::U => "U",
            Self::V => "V",
            Self::W => "W",
            Self::X => "X",
            Self::Y => "Y",
            Self::Z => "Z",
            Self::LWIN => "Left Windows",
            Self::RWIN => "Right Windows",
            Self::APPS => "Menu",
            Self::SLEEP => "Sleep",
            Self::NUMPAD0 => "Numpad 0",
            Self::NUMPAD1 => "Numpad 1",
            Self::NUMPAD2 => "Numpad 2",
            Self::NUMPAD3 => "Numpad 3",
            Self::NUMPAD4 => "Numpad 4",
            Self::NUMPAD5 => "Numpad 5",
            Self::NUMPAD6 => "Numpad 6",
            Self::NUMPAD7 => "Numpad 7",
            Self::NUMPAD8 => "Numpad 8",
            Self::NUMPAD9 => "Numpad 9",
            Self::MULTIPLY => "Multiply",
            Self::ADD => "Add",
            Self::SEPARATOR => "Separator",
            Self::SUBTRACT => "Subtract",
            Self::DECIMAL => "Decimal",
            Self::DIVIDE => "Divide",
            Self::F1 => "F1",
            Self::F2 => "F2",
            Self::F3 => "F3",
            Self::F4 => "F4",
            Self::F5 => "F5",
            Self::F6 => "F6",
            Self::F7 => "F7",
            Self::F8 => "F8",
            Self::F9 => "F9",
            Self::F10 => "F10",
            Self::F11 => "F11",
            Self::F12 => "F12",
            Self::F13 => "F13",
            Self::F14 => "F14",
            Self::F15 => "F15",
            Self::F16 => "F16",
            Self::F17 => "F17",
            Self::F18 => "F18",
            Self::F19 => "F19",
            Self::F20 => "F20",
            Self::F21 => "F21",
            Self::F22 => "F22",
            Self::F23 => "F23",
            Self::F24 => "F24",
            Self::NUMLOCK => "Num Lock",
            Self::SCROLL => "Scroll Lock",
            Self::LSHIFT => "Left Shift",
            Self::RSHIFT => "Right Shift",
            Self::LCONTROL => "Left Ctrl",
            Self::RCONTROL => "Right Ctrl",
            Self::LMENU => "Left Alt",
            Self::RMENU => "Right Alt",
            Self::BROWSER_BACK => "Browser Back",
            Self::BROWSER_FORWARD => "Browser Forward",
            Self::BROWSER_REFRESH => "Browser Refresh",
            Self::BROWSER_STOP => "Browser Stop",
            Self::BROWSER_SEARCH => "Browser Search",
            Self::BROWSER_FAVORITES => "Browser Favorites",
            Self::BROWSER_HOME => "Browser Home",
            Self::VOLUME_MUTE => "Volume Mute",
            Self::VOLUME_DOWN => "Volume Down",
            Self::VOLUME_UP => "Volume Up",
            Self::MEDIA_NEXT_TRACK => "Media Next Track",
            Self::MEDIA_PREV_TRACK => "Media Previous Track",
            Self::MEDIA_STOP => "Media Stop",
            Self::MEDIA_PLAY_PAUSE => "Media Play/Pause",
            Self::LAUNCH_MAIL => "Start Mail",
            Self::LAUNCH_MEDIA_SELECT => "Select Media",
            Self::LAUNCH_APP1 => "Start Application 1",
            Self::LAUNCH_APP2 => "Start Application 2",
            Self::OEM_1 => {
                if assume_us_layout {
                    "Semicolon"
                } else {
                    "OEM 1"
                }
            }
            Self::OEM_PLUS => "Plus",
            Self::OEM_COMMA => "Comma",
            Self::OEM_MINUS => "Minus",
            Self::OEM_PERIOD => "Period",
            Self::OEM_2 => {
                if assume_us_layout {
                    "Forward Slash"
                } else {
                    "OEM 2"
                }
            }
            Self::OEM_3 => {
                if assume_us_layout {
                    "Backtick"
                } else {
                    "OEM 3"
                }
            }
            Self::OEM_4 => {
                if assume_us_layout {
                    "Left Brace"
                } else {
                    "OEM 4"
                }
            }
            Self::OEM_5 => {
                if assume_us_layout {
                    "Backslash"
                } else {
                    "OEM 5"
                }
            }
            Self::OEM_6 => {
                if assume_us_layout {
                    "Right Brace"
                } else {
                    "OEM 6"
                }
            }
            Self::OEM_7 => {
                if assume_us_layout {
                    "Apostrophe"
                } else {
                    "OEM 7"
                }
            }
            Self::OEM_8 => "OEM 8",
            Self::OEM_102 => "Backslash (ISO)",
            Self::PROCESSKEY => "IME Process",
            Self::PACKET => "Unicode Packet",
            Self::ATTN => "Attn",
            Self::CRSEL => "CrSel",
            Self::EXSEL => "ExSel",
            Self::EREOF => "Erase EOF",
            Self::PLAY => "Play",
            Self::ZOOM => "Zoom",
            Self::NONAME => "Reserved",
            Self::PA1 => "PA1",
            Self::OEM_CLEAR => "Clear",
        }
    }
}
